Ext.data.JsonP.command_advanced({"guide":"<h1>Advanced Sencha Cmd</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/command_advanced-section-1'>Installation Considerations</a></li>\n<li><a href='#!/guide/command_advanced-section-2'>Configuration</a></li>\n<li><a href='#!/guide/command_advanced-section-3'>Command Line Details</a></li>\n<li><a href='#!/guide/command_advanced-section-4'>SDK-specific Commands</a></li>\n<li><a href='#!/guide/command_advanced-section-5'>Use in Ant</a></li>\n</ol>\n</div>\n\n<p>Sencha Cmd is a cross-platform command line tool that provides many automated tasks\naround the full life-cycle of your Sencha applications, from generating a fresh new project\nto deploying for production.</p>\n\n<p><p><img src=\"guides/command_advanced/../command/sencha-command-128.png\" alt=\"\"></p></p>\n\n<p>Before reading this guide, be sure you have covered the basics described in\n<a href=\"#/guide/command\">Introduction to Sencha Cmd</a>.</p>\n\n<h2 id='command_advanced-section-1'>Installation Considerations</h2>\n\n<h3>Location</h3>\n\n<p>The Installer allows you select a destination path, but changing this can have side-effects\n(discussed next). Ideally, all versions of Sencha Cmd are installed in a single base\nfolder with sub-folders named by the version number. On Windows, the default install folder\nfor a single-user installation is:</p>\n\n<pre><code>C:\\Users\\myself\\bin\\Sencha\\Cmd\\3.0.0\\\n</code></pre>\n\n<p>It is highly recommended that if you change this path, you preserve the last piece (that\nis, the version number) as well as install any other versions of Sencha Cmd in that\nsame parent folder.</p>\n\n<h3>Multiple Installed Versions</h3>\n\n<p>At the command prompt, all calls to <code>sencha</code> will land in the most recently installed version\nof Sencha Cmd. Sometimes, however, this version may not be compatible with the current\napplication.</p>\n\n<p>To support such scenarios, Sencha Cmd will look at the required version as specified by\nthe application (in <code>./sdk/.sencha.cfg</code> which was copied from the SDK when the application\nwas generated). It will then delegate the command to the the proper version of Sencha\nCmd.</p>\n\n<p>IMPORTANT: For this to work properly, both versions must be installed in a folder named by\ntheir version number and located in a common parent folder.</p>\n\n<p>Alternatively, each installed version also provides a version-specific name for Sencha\nCmd. This can be run as follows:</p>\n\n<pre><code>sencha-3.0.0 ....\n</code></pre>\n\n<p>Finally, the installer also sets an environment variable of the form \"SENCHA_CMD_3_0_0\"\nwhich can be used to adjust the PATH of the current console/shell:</p>\n\n<p>On Windows:</p>\n\n<pre><code>set PATH=%SENCHA_CMD_3_0_0%;%PATH%\nsencha ....\n</code></pre>\n\n<p>On Mac / Linux:</p>\n\n<pre><code>set PATH=$SENCHA_CMD_3_0_0:$PATH\nsencha ....\n</code></pre>\n\n<h2 id='command_advanced-section-2'>Configuration</h2>\n\n<p>Any parameter that can be passed to Sencha Cmd on the command line can be set as a\nconfiguration option in one of the configuration files discussed below. If you know the\ncommand line option, it is a simple matter to add that option to a configuration file.</p>\n\n<p>For example, to specify the \"name\" parameter for \"sencha generate app\" in the configuration,\nadd this line:</p>\n\n<pre><code>sencha.generate.app#name=MyApp\n</code></pre>\n\n<p>Of course, this particular parameter does not make sense to configure in this way. This is\njust to illustrate the link-style syntax. The content before the \"#\" is the Sencha Cmd\ncommands separated by dots. Following the \"#\" is the option name.</p>\n\n<p>To set global options (like \"debug\" logging), do this:</p>\n\n<pre><code>sencha#debug=true\n</code></pre>\n\n<p>Configuration will become more important over time as Sencha Cmd (especially the\ncompiler) evolves.</p>\n\n<h3>Configuration Files</h3>\n\n<p>Configuration is applied in a simple \"cascade\" starting with the configuration file found\nin the Sencha Cmd folder called <code>.sencha.cfg</code>. This contains the default configuration\nfor Sencha Cmd. All properties in that file are loaded as Sencha Cmd launches.</p>\n\n<p>If there is a <code>.sencha.cfg</code> in the current directory, it is loaded next and will override\nany options from the previous file. This case comes in to play when using \"sencha generate app\"\nfrom inside an SDK folder.</p>\n\n<p>Lastly, when Sencha Cmd is run from your application folder, the <code>.sencha.cfg</code> file\nfrom the <code>./sdk</code> folder is loaded. This file was placed there by <code>sencha generate app</code> and\ncan be use to contain project-specific configuration.</p>\n\n<h2 id='command_advanced-section-3'>Command Line Details</h2>\n\n<p>If you use Sencha Cmd frequently, there are some tricks that will be helpful to know.</p>\n\n<h3>Shortest-Unique Prefix</h3>\n\n<p>All commands, categories and options in Sencha Cmd can be specified by their full name\nor by the shortest prefix that is unique.</p>\n\n<p>To illustrate, since \"generate\" is the only top-level category in Sencha Cmd that starts\nwith the letter \"g\" (at the present time), and likewise, \"app\" is the only command in that\ncategory that starts with an \"a\", the following commands are equivalent:</p>\n\n<pre><code>sencha generate app MyApp ../MyApp\nsencha g a MyApp ../MyApp\n</code></pre>\n\n<p>IMPORTANT: While this can be convenient at the console or terminal, it is not advisable to\nuse these shorthands in scripts. The use of such terse commands in scripts will needlessly\nconfuse anyone trying to understand or maintain the script in the future.</p>\n\n<h3>Command Chaining</h3>\n\n<p>The Sencha Cmd command-line processor executes all commands given to it until they have\nall been dispatched. This means you can avoid the cost of re-launching the whole Sencha\nCmd process to execute multiple commands. To take advantage of this, you just insert\n\"and\" or \"then\" between commands.</p>\n\n<p>The \"and\" and \"then\" commands are based on the execution model of Sencha Cmd and its\nhierarchical structure of commands and categories. The \"and\" command is used to execute\nanother command in the same category as the previous command. This is the most common use\ncase.</p>\n\n<p>For example, to generate a controller and 2 models:</p>\n\n<pre><code>cd /path/to/MyApp\nsencha generate controller Central and model User id:int and model Ticket id,name,email\n</code></pre>\n\n<p>In the above, the 2 uses of \"and\" caused the 2 \"generate model\" commands to be executed. The\n\"then\" command is similar to \"and\", except that the next command will be part of the \"root\"\ncategory (that is, the \"sencha\" command).</p>\n\n<p>For example, the following will generate a new model then build the application:</p>\n\n<pre><code>cd /path/to/MyApp\nsencha generate model User id:int,name then app build\n</code></pre>\n\n<h3>Response Files</h3>\n\n<p>When command chaining starts to make command lines too long to be readable (perhaps in a\ncomplex build script), it is possible to put command line arguments in a file and tell\nSencha Cmd to read arguments from that file.</p>\n\n<p>For example:</p>\n\n<pre><code>cd /path/to/MyApp\nsencha @file.sencha\n</code></pre>\n\n<p>In the above, the <code>file.sencha</code> file is read and each line is taken to be a command line\nargument. Unless that line begins with \"#\", in which case it is skipped. All lines from\nthe specified file will be inserted into the command line arguments as if they had been\ntyped there instead of \"@file.sencha\". This means that <code>file.sencha</code> can contain response\nfile insertions as well (for example, \"@file2.sencha\").</p>\n\n<h3>Category State</h3>\n\n<p>For performance reasons, some categories maintain state across multiply executed commands.\nThe best example of this is the new <code>compile</code> category of commands. Instead of reading all\nthe sources for each command, the <code>compile</code> category maintains a cache of all the files in\nthe \"class path\". This context is then available to all of the commands in the category.</p>\n\n<p>For starters, the following command will rebuild the <code>ext-all-dev.js</code> and <code>ext-all.js</code> files\nbut read the framework sources only once:</p>\n\n<pre><code>cd /path/to/MyApp\nsencha compile -c sdk/src --debug=true concat -o sdk/ext-all-dev.js \\\n    and --debug=false concat -c -o sdk/ext-all.js\n</code></pre>\n\n<p>If this caching is not wanted, perhaps because the set of files is not the same for the\nnext set of outputs, use the \"then\" command:</p>\n\n<pre><code>cd /path/to/MyApp\nsencha compile -c sdk/src --debug=true concat -o sdk/ext-all-dev.js \\\n     then compile -c app/foo --debug=true concat -o app/foo/foo-all.js\n</code></pre>\n\n<p>At the present time, only the <code>compile</code> category maintains state across commands.</p>\n\n<h2 id='command_advanced-section-4'>SDK-specific Commands</h2>\n\n<p>The same Sencha Cmd install is used by both Ext JS and Sencha Touch and as such there\nare many times when commands perform slightly different operations. Further, some commands\nare only available for one framework (e.g., native packaging).</p>\n\n<p>To accomodate this, the functionality of Sencha Cmd is partitioned across two (2) layers:\nthe command line (properly called \"Sencha Cmd\") and the lower-level interface for use\nin <a href=\"http://ant.apache.org/\">Ant</a>.</p>\n\n<p><p><img src=\"guides/command_advanced/sencha-command-diagram.png\" alt=\"\"></p></p>\n\n<p>The SDK provides its logic in the form of two (2) Ant files that live in <code>./sdk/cmd</code>:</p>\n\n<ul>\n<li><code>./sdk/cmd/plugin.xml</code> - This file should be considered read only and is\nprovided by the SDK at the time of <code>sencha generate app</code>.</li>\n<li><code>./sdk/command/plugin.xml</code> - This file includes <code>plugin-impl.xml</code> to provide the actual\nlogic, but this file is intended for users to edit to set hooks that run before and/or\nafter SDK actions such as <code>sencha generate model</code>.</li>\n</ul>\n\n\n<p>The intended purpose of <code>plugin.xml</code> is to allow users to attach logic before and/or after\nmodels are generated and added to the application. There are often outside issues to deal\nwith in this case.</p>\n\n<p>If you want to do some checks to see if new model definitions follows project guidelines,\nsay that the first field is always \"id:string\", you could add this to\n<code>sdk/command/plugins.xml</code>:</p>\n\n<pre><code>&lt;target name=\"-before-generate-model\"&gt;\n    &lt;if&gt;\n        &lt;not&gt;&lt;matches string=\"${args.fields}\" pattern=\"^id\\:string,.*\"/&gt;&lt;/not&gt;\n        &lt;then&gt;\n            &lt;fail&gt;Models must have \"id:string\" as first field.&lt;/fail&gt;\n        &lt;/then&gt;\n    &lt;/if&gt;\n&lt;/target&gt;\n</code></pre>\n\n<p>You could also provide a hook to update other systems when a new model has been added.</p>\n\n<pre><code>&lt;target name=\"-after-generate-model\"&gt;\n    ... post new/updated Model ${args.name} and ${args.fields} ...\n&lt;/target&gt;\n</code></pre>\n\n<p>For details on what sorts of hooks are available, see the comments in the plugin.xml file.</p>\n\n<p>NOTE: The <code>plugins-impl.xml</code> file imports <a href=\"http://ant-contrib.sourceforge.net/\">Ant Contrib</a>\nwhich provides many <a href=\"http://ant-contrib.sourceforge.net/tasks/tasks/index.html\">useful tasks</a>.</p>\n\n<h2 id='command_advanced-section-5'>Use in Ant</h2>\n\n<p>While the primary use of Sencha Cmd is at the command line (hence its name), Sencha Cmd\nalso usable directly from Ant.</p>\n\n<p>There are many commands provided at this level, so if you are interested, check out the\n<a href=\"#/guide/command_ant\">Ant Integration</a> guide.</p>\n","title":"Advanced Sencha Command"});