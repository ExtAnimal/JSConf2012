Ext.data.JsonP.command_theme({"guide":"<h1>Building Themes for Ext JS</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/command_theme-section-1'>Requirements</a></li>\n<li><a href='#!/guide/command_theme-section-2'>Disclaimer</a></li>\n<li><a href='#!/guide/command_theme-section-3'>Getting Started</a></li>\n<li><a href='#!/guide/command_theme-section-4'>Multiple Themes</a></li>\n<li><a href='#!/guide/command_theme-section-5'>Compiling Your Themes</a></li>\n<li><a href='#!/guide/command_theme-section-6'>Anatomy of a Theme</a></li>\n<li><a href='#!/guide/command_theme-section-7'>Managing Themes Manually</a></li>\n<li><a href='#!/guide/command_theme-section-8'>Compiling Your Custom Theme</a></li>\n</ol>\n</div>\n\n<p>There are several steps required to build a Theme that Sencha Command automates for you. In\nthe future, Sencha Command will take on even more of the process.</p>\n\n<p><p><img src=\"guides/command_theme/../command/sencha-command-128.png\" alt=\"\"></p></p>\n\n<h2 id='command_theme-section-1'>Requirements</h2>\n\n<p>In order to build themes from SASS, you will need:</p>\n\n<ul>\n<li><a href=\"http://compass-style.org/\">Compass</a></li>\n</ul>\n\n\n<h2 id='command_theme-section-2'>Disclaimer</h2>\n\n<p>This guide is focused on the file-level mechanics of building and managing themes. It does\nnot describe how to develop themes, manage styles or SASS variables.</p>\n\n<h2 id='command_theme-section-3'>Getting Started</h2>\n\n<p>Most of this guide assumes you are working in an application generated by Sencha Command.\nIf that is not the case, many of these steps will change to reflect different paths and the\nlike. See the section below on \"Managing Themes Manually\".</p>\n\n<p>All applications start with a \"default\" theme. Different pieces are stored in two folders:</p>\n\n<ul>\n<li><code>./resources/sass/default</code></li>\n<li><code>./resources/theme/default</code></li>\n</ul>\n\n\n<h3>Use of SASS</h3>\n\n<p>The majority of your work on themes is done in SASS. The starter files are generated for\nyou, but then you proceed to edit them.</p>\n\n<p>When you compile your SASS, it should generate a CSS file in \"./resources/css/default\"\nnamed \"theme.css\".</p>\n\n<h2 id='command_theme-section-4'>Multiple Themes</h2>\n\n<p>If you need two or more themes (as described in <a href=\"#/guide/command_app\">Developing Apps with Sencha Command</a>)\nyou can generate new themes with this command:</p>\n\n<pre><code>sencha generate theme foo\n</code></pre>\n\n<p>This will generate:</p>\n\n<ul>\n<li><code>./resources/sass/foo</code></li>\n<li><code>./resources/theme/foo</code></li>\n</ul>\n\n\n<p>And the SASS for this theme should be compiled to \"./resources/css/foo/theme.css\".</p>\n\n<h2 id='command_theme-section-5'>Compiling Your Themes</h2>\n\n<p>Typically, your themes will be compiled and built by the <code>sencha app build</code> command, but\nit is sometimes helpful to build a single theme at a time.</p>\n\n<p>To compile a theme, you must currently use the <code>compass compile</code> command in your SASS\ndirectory. TODO - sencha theme compile default ?</p>\n\n<pre><code>cd /path/to/MyApp/resources/sass/default\ncompass compile\n</code></pre>\n\n<p>This should produce the CSS in \"../../css/default/theme.css\" (or from the root of your\napplication folder, \"resources/css/default/theme.css\").</p>\n\n<p>The next step is to build the image slices needed for IE browsers. This is done like so:</p>\n\n<pre><code>cd /path/to/MyApp\nsencha theme build default\n</code></pre>\n\n<p>This will place the sliced images in the \"./resources/css/default\" folder alongside the\nCSS file generated by SASS. This approach reduces the size of the CSS file since all image\npaths are relative to the CSS file location.</p>\n\n<h2 id='command_theme-section-6'>Anatomy of a Theme</h2>\n\n<p>The <code>theme</code> folder is split in to two levels. For clarity, lets consider a <code>theme</code> folder\nwith two themes:</p>\n\n<pre><code>theme/\n    custom.js\n    manifest.js\n    render.js\n    shortcuts.js\n    default/\n        theme.html\n    gray/\n        theme.html\n</code></pre>\n\n<h3>theme.html</h3>\n\n<p>The <code>theme.html</code> file is the entry point for the image generation phase of the theme\nbuilder.</p>\n\n<p>You should be able to open this file in Chrome (or other modern browser) and see what the\nbase image will be for your theme. This is an ideal page to test your styling, of course,\nbecause every component in every state will be present.</p>\n\n<p>This is an example of what the \"resources/theme/default/theme.html\" file looks like:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;\n\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/default/theme.css\" /&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"../styles.css\" /&gt;\n\n        &lt;script type=\"text/javascript\" src=\"../../../sdk/ext-all.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"../manifest.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"../shortcuts.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"../custom.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"../render.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body class=\"ext-generator\"&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>This file is designed to be edited as needed. This file will not be edited or regenerated\nby Sencha Command.</p>\n\n<p><strong>IMPORTANT:</strong> While this file is \"freely\" editable, be sure to keep the relative order of\nthe <code>link</code> and <code>script</code> tags. In particular <code>custom.js</code> must come after <code>manifest.js</code> and\n<code>shortcuts.js</code> and before <code>render.js</code>.</p>\n\n<p>The most likely things you might need to edit in this file are the relative paths. All of\nthe generated files included in the page need to be preserved. You can add <code>script</code> tags\nor <code>link</code> tags as needed, but consider their order in the sequence of tags.</p>\n\n<h3>Private Files</h3>\n\n<p>There are several files that should be considered \"private\" and should not be edited. These\nare</p>\n\n<ul>\n<li><code>manifest.js</code> - TODO</li>\n<li><code>shortcuts.js</code> - TODO</li>\n<li><code>styles.css</code> - This file contains styles specific to the theme builder.</li>\n<li><code>render.js</code> - This file renders the components described by the manifest and shortcuts.</li>\n</ul>\n\n\n<h3>Customization</h3>\n\n<p>The <code>custom.js</code> file is the file where you can add value to the process. This file will\nnot be regenerated by Sencha Command. The primary use of this file is to add new shortcuts\nor manifest entries that might be needed by custom components you have created for your\napplication.</p>\n\n<p>To add manifest entires ... TODO</p>\n\n<p>To add shortcuts ... TODO</p>\n\n<h3>Third Party Components</h3>\n\n<p>If you have received custom components from a third party, you should ask them to provide\na custom theme definition file so that you can include it in your <code>theme</code> folder and as a\n<code>script</code> tag in your 'theme.html'. The content of such a file should be the same as\ndescribed for a <code>custom.js</code> file.</p>\n\n<p>You will probably also need SASS files (or at least CSS files) to add to your SASS theme\nand/or as <code>link</code> tags in <code>theme.html</code>.</p>\n\n<h2 id='command_theme-section-7'>Managing Themes Manually</h2>\n\n<p>Many applications existed before Sencha Command provided application management features or\nfor other reasons do not have the structure assumed by the \"simple\" commands described\nabove. While the commands to handle this case require more switches and understanding, it\nis possible to use Sencha Command in these more complex situations.</p>\n\n<p><strong>IMPORTANT:</strong> The new version of Sencha Command takes a different approach to theme\nbuilding than did previous versions (which called this mechanism \"The Slicer\"). There is\nno longer a <code>sencha slice</code> command. This is now handled by the new <code>sencha theme build</code>\ncommand.</p>\n\n<h3>Creating Your Custom Theme</h3>\n\n<p>In order to produce sliced images for your theme, you need the necessary files that define\nthe theme. The easiest way to get these files is to generate an application in some temporary\nfolder and copy the ./resources/theme folder to a location of your choosing.</p>\n\n<pre><code>sencha generate app /temp/dummyApp\n</code></pre>\n\n<p>Then copy \"/temp/dummApp/resources/theme\" to your desired location. For example, let's say\nthat location is \"/path/to/MyApp/stuff/theme\".</p>\n\n<p>Following the above rules for customization of <code>theme.html</code> you can flatten the folders in\nto a single folder and change the relative paths in <code>theme.html</code> accordingly. You can also\ncorrect the relative paths to your CSS file(s) and the framework.</p>\n\n<h2 id='command_theme-section-8'>Compiling Your Custom Theme</h2>\n\n<p>Once you have moved the theme files to \"/path/to/MyApp/stuff/theme\" and editing all of the\nrelative paths in <code>theme.html</code>, you can proceed to generate images. Let's assume you run\nthe command from the root of your application.</p>\n\n<pre><code>cd /path/to/MyApp\nsencha theme build -page stuff/theme/theme.html -out images/theme\n</code></pre>\n\n<p>This will load \"stuff/theme/theme.html\" using an embedded WebKit instance and capture an\nimage of the content of the rendered page as well as a data object describing all of the\nimage slicing required. From those two results, the image slicing will proceed to generate\nall of the images to the \"images/theme\" folder.</p>\n\n<p>If something is wrong with the generated images, it can be helpful to keep the page image\nand the data object for diagnostic purposes. This can be done by specifying their names in\nthe command:</p>\n\n<pre><code>cd /path/to/MyApp\nsencha theme build -page stuff/theme/theme.html -out images/theme \\\n    -image image.png -data data.json\n</code></pre>\n\n<p>The image is always a PNG file because PNG is both lossless and has a proper alpha channel.\nThe data object is always in JSON format.</p>\n","title":"Building Themes for Ext JS"});